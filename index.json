[{"categories":null,"contents":"Running a program  Sample program hello.py:\nprint(\u0026#34;hello world\u0026#34;) Run program:\n❯ python3 hello.py hello world    Comments  Single line comment\n#This is a comment print(\u0026#34;Hello, World!\u0026#34;) Inline comment\nprint(\u0026#34;Hello, World!\u0026#34;) #This is a comment Multi-line comments\n#This is a comment #written in #more than just one line print(\u0026#34;Hello, World!\u0026#34;) or\n\u0026#34;\u0026#34;\u0026#34; This is a comment written in more than just one line \u0026#34;\u0026#34;\u0026#34; print(\u0026#34;Hello, World!\u0026#34;)    ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://hossainemruz.github.io/notes/python/basics/intro/","summary":"Running a program  Sample program hello.py:\nprint(\u0026#34;hello world\u0026#34;) Run program:\n❯ python3 hello.py hello world    Comments  Single line comment\n#This is a comment print(\u0026#34;Hello, World!\u0026#34;) Inline comment\nprint(\u0026#34;Hello, World!\u0026#34;) #This is a comment Multi-line comments\n#This is a comment #written in #more than just one line print(\u0026#34;Hello, World!\u0026#34;) or\n\u0026#34;\u0026#34;\u0026#34; This is a comment written in more than just one line \u0026#34;\u0026#34;\u0026#34; print(\u0026#34;Hello, World!\u0026#34;)    ","tags":null,"title":"Python Basics"},{"categories":null,"contents":"Creating Variable  Python has no command for declaring a variable. A variable is created the moment you first assign a value to it.\nx = 5 y = \u0026#34;John\u0026#34; print(x) print(y)    Dynamic Type  Variables do not need to be declared with any particular type, and can even change type after they have been set.\nx = 4 # x is of type int x = \u0026#34;Sally\u0026#34; # x is now of type str    Casting  x = str(3) # x will be \u0026#39;3\u0026#39; y = int(3) # y will be 3 z = float(3) # z will be 3.0    Getting Type of a Variable  You can get the data type of a variable with the type() function.\nx = 5 y = \u0026#34;John\u0026#34; print(type(x)) print(type(y))    Single Quote vs Double Quote  x = \u0026#34;John\u0026#34; # is the same as x = \u0026#39;John\u0026#39;    Case sensitivity  Variable names are case-sensitive. This will create two variables:\na = 4 A = \u0026#34;Sally\u0026#34; #A will not overwrite a    Variable naming convention  Variable name must follow the criteria:\n A variable name must start with a letter or the underscore character A variable name cannot start with a number A variable name can only contain alpha-numeric characters and underscores (A-z, 0-9, and _ ) Variable names are case-sensitive (age, Age and AGE are three different variables)  myvar = \u0026#34;John\u0026#34; my_var = \u0026#34;John\u0026#34; _my_var = \u0026#34;John\u0026#34; myVar = \u0026#34;John\u0026#34; MYVAR = \u0026#34;John\u0026#34; myvar2 = \u0026#34;John\u0026#34;    Batch Assignment: Different values at different variable  Python allows you to assign values to multiple variables in one line:\nx, y, z = \u0026#34;Orange\u0026#34;, \u0026#34;Banana\u0026#34;, \u0026#34;Cherry\u0026#34; print(x) print(y) print(z) The number of variable in left side must be equal to the number of values in right side. Otherwise, it will give error.\n   Batch Assignment: One value into multiple variables  x = y = z = \u0026#34;Orange\u0026#34; print(x) print(y) print(z)    Unpacking a Collection  If you have a collection of values in a list, tuple etc. Python allows you extract the values into variables. This is called unpacking.\nfruits = [\u0026#34;apple\u0026#34;, \u0026#34;banana\u0026#34;, \u0026#34;cherry\u0026#34;] x, y, z = fruits print(x) print(y) print(z)    Global Variable  Variables that are created outside of a function (as in all of the examples above) are known as global variables.\nGlobal variables can be used by everyone, both inside of functions and outside.\nExample:\nx = \u0026#34;awesome\u0026#34; def myfunc(): x = \u0026#34;fantastic\u0026#34; print(\u0026#34;Python is \u0026#34; + x) myfunc() print(\u0026#34;Python is \u0026#34; + x) Output:\nPython is fantastic Python is awesome    Global Variable using `global` Keyword  We can also expose a local variable from inside a function to act as a global variable using global keyword.\nExample 1:\ndef myfunc(): global x x = \u0026#34;fantastic\u0026#34; myfunc() print(\u0026#34;Python is \u0026#34; + x) Output:\nPython is fantastic Example 2:\nx = \u0026#34;awesome\u0026#34; def myfunc(): global x x = \u0026#34;fantastic\u0026#34; myfunc() print(\u0026#34;Python is \u0026#34; + x) Output:\nPython is fantastic    ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://hossainemruz.github.io/notes/python/basics/variables/","summary":"Creating Variable  Python has no command for declaring a variable. A variable is created the moment you first assign a value to it.\nx = 5 y = \u0026#34;John\u0026#34; print(x) print(y)    Dynamic Type  Variables do not need to be declared with any particular type, and can even change type after they have been set.\nx = 4 # x is of type int x = \u0026#34;Sally\u0026#34; # x is now of type str    Casting  x = str(3) # x will be \u0026#39;3\u0026#39; y = int(3) # y will be 3 z = float(3) # z will be 3.","tags":null,"title":"Python Variables"},{"categories":null,"contents":"Built-in Data Types     Category Built-in Data Types     Text Type str   Numeric Types int, float, complex   Sequence Types list, tuple, range   Mapping Type dict   Set Types set, frozenset   Boolean Type bool   Binary Types bytes, bytearray, memoryview       Get Type of a Variable  Print the data type of the variable x:\nx = 5 print(type(x)) Output:\n\u0026lt;class \u0026#39;int\u0026#39;\u0026gt;    Setting Data-Type of a Variable  When we assign something into a variable, python dynamically set it\u0026rsquo;s data type according to the value we are trying to assign.\n   Example Data-Type     x = \u0026quot;Hello World\u0026quot; str   x = 20 int   x = 20.5 float   x = 1j complex   x = [\u0026quot;apple\u0026quot;, \u0026quot;banana\u0026quot;, \u0026quot;cherry\u0026quot;] list   x = (\u0026quot;apple\u0026quot;, \u0026quot;banana\u0026quot;, \u0026quot;cherry\u0026quot;) tuple   x = range(6) range   x = {\u0026quot;name\u0026quot; : \u0026quot;John\u0026quot;, \u0026quot;age\u0026quot; : 36} dict   x = {\u0026quot;apple\u0026quot;, \u0026quot;banana\u0026quot;, \u0026quot;cherry\u0026quot;} set   x = frozenset({\u0026quot;apple\u0026quot;, \u0026quot;banana\u0026quot;, \u0026quot;cherry\u0026quot;}) frozenset   x = True bool   x = b\u0026quot;Hello\u0026quot; bytes   x = bytearray(5) bytearray   x = memoryview(bytes(5)) memoryview       Setting Specific Data-Type     Example Data Type     x = str(\u0026quot;Hello World\u0026quot;) str   x = int(20) int   x = float(20.5) float   x = complex(1j) complex   x = list((\u0026quot;apple\u0026quot;, \u0026quot;banana\u0026quot;, \u0026quot;cherry\u0026quot;)) list   x = tuple((\u0026quot;apple\u0026quot;, \u0026quot;banana\u0026quot;, \u0026quot;cherry\u0026quot;)) tuple   x = range(6) range   x = dict(name=\u0026quot;John\u0026quot;, age=36) dict   x = set((\u0026quot;apple\u0026quot;, \u0026quot;banana\u0026quot;, \u0026quot;cherry\u0026quot;)) set   x = frozenset((\u0026quot;apple\u0026quot;, \u0026quot;banana\u0026quot;, \u0026quot;cherry\u0026quot;)) frozenset   x = bool(5) bool   x = bytes(5) bytes   x = bytearray(5) bytearray   x = memoryview(bytes(5)) memoryview       ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://hossainemruz.github.io/notes/python/basics/data_types/","summary":"Built-in Data Types     Category Built-in Data Types     Text Type str   Numeric Types int, float, complex   Sequence Types list, tuple, range   Mapping Type dict   Set Types set, frozenset   Boolean Type bool   Binary Types bytes, bytearray, memoryview       Get Type of a Variable  Print the data type of the variable x:","tags":null,"title":"Python Data Types"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://hossainemruz.github.io/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"Greeting! Thank you for visiting my portfolio. Currently, this does not contain many blog posts. I wish one day I will find something to worth of writing.\n","date":"March 21, 2021","hero":"/images/default-hero.jpg","permalink":"https://hossainemruz.github.io/posts/introduction/","summary":"Greeting! Thank you for visiting my portfolio. Currently, this does not contain many blog posts. I wish one day I will find something to worth of writing.","tags":null,"title":"Welcome to my Portfolio"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://hossainemruz.github.io/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"}]